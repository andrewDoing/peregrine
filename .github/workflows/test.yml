# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Use preinstalled PostgreSQL 
      - name: Start PostgreSQL on Ubuntu
        run: |
          sudo systemctl start postgresql.service
          pg_isready
          
#       # Change user name and password to meet your requirements
#       - name: Create additional user
#         run: |
#           sudo -u postgres psql --command="CREATE USER joe PASSWORD 'foo'" --command="\du"
          
#       # Change database name to meet your requirements
#       - name: Create additional database
#         run: |
#           sudo -u postgres createdb --owner=joe Test
#           PGPASSWORD=foo psql --username=joe --host=localhost --list timetable
      
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        
      # Sets up Python 3.6
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.6'
      
      - name: before_install
        run: |
          # bust only the the part of the cache that we are frequently changing
          pip uninstall --yes gdcdictionary gdcdatamodel || true
      - name: install
        run: |
          pip install -r requirements.txt
          pip install -r dev-requirements.txt
      - name: before_script
        run: |
          pip freeze
          python bin/setup_test_database.py
          mkdir -p tests/resources/keys; cd tests/resources/keys; openssl genrsa -out test_private_key.pem 2048; openssl rsa -in test_private_key.pem -pubout -out test_public_key.pem; cd -
  test:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: script
        run: |
          py.test -vv --cov=peregrine --covreport xml tests
          
      - name: after_script
        run: |
          python-codacy-coverage -r coverage.xml
